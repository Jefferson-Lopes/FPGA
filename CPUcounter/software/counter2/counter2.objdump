
counter2.elf:     file format elf32-littlenios2
counter2.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00008020

Program Header:
    LOAD off    0x00001000 vaddr 0x00008000 paddr 0x00008000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00008020 paddr 0x00008020 align 2**12
         filesz 0x00000204 memsz 0x00000204 flags r-x
    LOAD off    0x00001224 vaddr 0x00008224 paddr 0x00008228 align 2**12
         filesz 0x00000004 memsz 0x00000004 flags rw-
    LOAD off    0x0000122c vaddr 0x0000822c paddr 0x0000822c align 2**12
         filesz 0x00000000 memsz 0x0000000c flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00008000  00008000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000000  00008020  00008020  00001228  2**0
                  CONTENTS
  2 .text         000001ec  00008020  00008020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000018  0000820c  0000820c  0000120c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00000004  00008224  00008228  00001224  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          0000000c  0000822c  0000822c  0000122c  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory2 00000000  00008238  00008238  00001228  2**0
                  CONTENTS
  7 .comment      0000002c  00000000  00000000  00001228  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00000168  00000000  00000000  00001258  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00005ae3  00000000  00000000  000013c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 000013a0  00000000  00000000  00006ea3  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00001267  00000000  00000000  00008243  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00000190  00000000  00000000  000094ac  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00000b92  00000000  00000000  0000963c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    000001a1  00000000  00000000  0000a1ce  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000010  00000000  00000000  0000a370  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000000e0  00000000  00000000  0000a380  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  0000b1d4  2**0
                  CONTENTS, READONLY
 18 .cpu          0000000a  00000000  00000000  0000b1d7  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  0000b1e1  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  0000b1e2  2**0
                  CONTENTS, READONLY
 21 .stderr_dev   00000009  00000000  00000000  0000b1e3  2**0
                  CONTENTS, READONLY
 22 .stdin_dev    00000009  00000000  00000000  0000b1ec  2**0
                  CONTENTS, READONLY
 23 .stdout_dev   00000009  00000000  00000000  0000b1f5  2**0
                  CONTENTS, READONLY
 24 .sopc_system_name 00000003  00000000  00000000  0000b1fe  2**0
                  CONTENTS, READONLY
 25 .quartus_project_dir 0000002f  00000000  00000000  0000b201  2**0
                  CONTENTS, READONLY
 26 .jdi          000049d5  00000000  00000000  0000b230  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00008000 l    d  .entry	00000000 .entry
00008020 l    d  .exceptions	00000000 .exceptions
00008020 l    d  .text	00000000 .text
0000820c l    d  .rodata	00000000 .rodata
00008224 l    d  .rwdata	00000000 .rwdata
0000822c l    d  .bss	00000000 .bss
00008238 l    d  .onchip_memory2	00000000 .onchip_memory2
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 C:/Users/jeff7/Documents/GitHub/FPGA/CPUcounter/software/counter2_bsp/obj/HAL/src/crt0.o
00008058 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 hello_world_small.c
00000000 l    df *ABS*	00000000 alt_load.c
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_putstr.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 strlen.c
00008128 g     F .text	0000002c alt_main
00008228 g       *ABS*	00000000 __flash_rwdata_start
00008154 g     F .text	00000038 alt_putstr
00008224 g     O .rwdata	00000004 jtag_uart
000081e8 g     F .text	00000008 altera_nios2_gen2_irq_init
00008000 g     F .entry	0000000c __reset
00008020 g       *ABS*	00000000 __flash_exceptions_start
00008230 g     O .bss	00000004 alt_argv
00010224 g       *ABS*	00000000 _gp
00008238 g       *ABS*	00000000 __bss_end
000081e0 g     F .text	00000004 alt_dcache_flush_all
00008228 g       *ABS*	00000000 __ram_rwdata_end
00008224 g       *ABS*	00000000 __ram_rodata_end
00008238 g       *ABS*	00000000 end
0000e590 g       *ABS*	00000000 __alt_stack_pointer
000081b0 g     F .text	00000030 altera_avalon_jtag_uart_write
00008020 g     F .text	0000003c _start
000081ac g     F .text	00000004 alt_sys_init
00008224 g       *ABS*	00000000 __ram_rwdata_start
0000820c g       *ABS*	00000000 __ram_rodata_start
00008238 g       *ABS*	00000000 __alt_stack_base
0000822c g       *ABS*	00000000 __bss_start
0000805c g     F .text	00000018 main
0000822c g     O .bss	00000004 alt_envp
0000820c g       *ABS*	00000000 __flash_rodata_start
0000818c g     F .text	00000020 alt_irq_init
00008234 g     O .bss	00000004 alt_argc
00008020 g       *ABS*	00000000 __ram_exceptions_start
00008000 g       *ABS*	00000000 __alt_mem_onchip_memory2
00008228 g       *ABS*	00000000 _edata
00008238 g       *ABS*	00000000 _end
00008020 g       *ABS*	00000000 __ram_exceptions_end
0000e590 g       *ABS*	00000000 __alt_data_end
0000800c g       .entry	00000000 _exit
000081f0 g     F .text	0000001c strlen
000081e4 g     F .text	00000004 alt_icache_flush_all
00008074 g     F .text	000000b4 alt_load



Disassembly of section .entry:

00008000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
    8000:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
    8004:	08600814 	ori	at,at,32800
    jmp r1
    8008:	0800683a 	jmp	at

0000800c <_exit>:
	...

Disassembly of section .text:

00008020 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
    8020:	06c00034 	movhi	sp,0
    ori sp, sp, %lo(__alt_stack_pointer)
    8024:	def96414 	ori	sp,sp,58768
    movhi gp, %hi(_gp)
    8028:	06800074 	movhi	gp,1
    ori gp, gp, %lo(_gp)
    802c:	d6808914 	ori	gp,gp,548
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
    8030:	00800034 	movhi	r2,0
    ori r2, r2, %lo(__bss_start)
    8034:	10a08b14 	ori	r2,r2,33324

    movhi r3, %hi(__bss_end)
    8038:	00c00034 	movhi	r3,0
    ori r3, r3, %lo(__bss_end)
    803c:	18e08e14 	ori	r3,r3,33336

    beq r2, r3, 1f
    8040:	10c00326 	beq	r2,r3,8050 <_start+0x30>

0:
    stw zero, (r2)
    8044:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
    8048:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
    804c:	10fffd36 	bltu	r2,r3,8044 <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
    8050:	00080740 	call	8074 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
    8054:	00081280 	call	8128 <alt_main>

00008058 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
    8058:	003fff06 	br	8058 <alt_after_alt_main>

0000805c <main>:

#include "sys/alt_stdio.h"

int main()
{ 
  alt_putstr("Hello from Nios II!\n");
    805c:	01000074 	movhi	r4,1
{ 
    8060:	deffff04 	addi	sp,sp,-4
  alt_putstr("Hello from Nios II!\n");
    8064:	21208304 	addi	r4,r4,-32244
{ 
    8068:	dfc00015 	stw	ra,0(sp)
  alt_putstr("Hello from Nios II!\n");
    806c:	00081540 	call	8154 <alt_putstr>

  /* Event loop never exits. */
  while (1);
    8070:	003fff06 	br	8070 <main+0x14>

00008074 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
    8074:	deffff04 	addi	sp,sp,-4

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
    8078:	00800074 	movhi	r2,1
    807c:	00c00074 	movhi	r3,1
    8080:	dfc00015 	stw	ra,0(sp)
    8084:	10a08904 	addi	r2,r2,-32220
    8088:	18e08a04 	addi	r3,r3,-32216
    808c:	10c00326 	beq	r2,r3,809c <alt_load+0x28>
  {
    while( to != end )
    8090:	01000074 	movhi	r4,1
    8094:	21208a04 	addi	r4,r4,-32216
    8098:	1100141e 	bne	r2,r4,80ec <alt_load+0x78>
  if (to != from)
    809c:	00800074 	movhi	r2,1
    80a0:	00c00074 	movhi	r3,1
    80a4:	10a00804 	addi	r2,r2,-32736
    80a8:	18e00804 	addi	r3,r3,-32736
    80ac:	10c00326 	beq	r2,r3,80bc <alt_load+0x48>
    while( to != end )
    80b0:	01000074 	movhi	r4,1
    80b4:	21200804 	addi	r4,r4,-32736
    80b8:	1100111e 	bne	r2,r4,8100 <alt_load+0x8c>
  if (to != from)
    80bc:	00800074 	movhi	r2,1
    80c0:	00c00074 	movhi	r3,1
    80c4:	10a08304 	addi	r2,r2,-32244
    80c8:	18e08304 	addi	r3,r3,-32244
    80cc:	10c00326 	beq	r2,r3,80dc <alt_load+0x68>
    while( to != end )
    80d0:	01000074 	movhi	r4,1
    80d4:	21208904 	addi	r4,r4,-32220
    80d8:	11000e1e 	bne	r2,r4,8114 <alt_load+0xa0>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
    80dc:	00081e00 	call	81e0 <alt_dcache_flush_all>
  alt_icache_flush_all();
}
    80e0:	dfc00017 	ldw	ra,0(sp)
    80e4:	dec00104 	addi	sp,sp,4
  alt_icache_flush_all();
    80e8:	00081e41 	jmpi	81e4 <alt_icache_flush_all>
    {
      *to++ = *from++;
    80ec:	19400017 	ldw	r5,0(r3)
    80f0:	10800104 	addi	r2,r2,4
    80f4:	18c00104 	addi	r3,r3,4
    80f8:	117fff15 	stw	r5,-4(r2)
    80fc:	003fe606 	br	8098 <alt_load+0x24>
    8100:	19400017 	ldw	r5,0(r3)
    8104:	10800104 	addi	r2,r2,4
    8108:	18c00104 	addi	r3,r3,4
    810c:	117fff15 	stw	r5,-4(r2)
    8110:	003fe906 	br	80b8 <alt_load+0x44>
    8114:	19400017 	ldw	r5,0(r3)
    8118:	10800104 	addi	r2,r2,4
    811c:	18c00104 	addi	r3,r3,4
    8120:	117fff15 	stw	r5,-4(r2)
    8124:	003fec06 	br	80d8 <alt_load+0x64>

00008128 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    8128:	deffff04 	addi	sp,sp,-4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    812c:	0009883a 	mov	r4,zero
{
    8130:	dfc00015 	stw	ra,0(sp)
  alt_irq_init (NULL);
    8134:	000818c0 	call	818c <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
    8138:	00081ac0 	call	81ac <alt_sys_init>
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
    813c:	d1a00217 	ldw	r6,-32760(gp)
    8140:	d1600317 	ldw	r5,-32756(gp)
    8144:	d1200417 	ldw	r4,-32752(gp)
  close(STDOUT_FILENO);
  exit (result);
#endif

  ALT_LOG_PRINT_BOOT("[alt_main.c] After main - we should not be here?.\r\n");
}
    8148:	dfc00017 	ldw	ra,0(sp)
    814c:	dec00104 	addi	sp,sp,4
  main (alt_argc, alt_argv, alt_envp);
    8150:	000805c1 	jmpi	805c <main>

00008154 <alt_putstr>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided fputs() routine.
 */
int 
alt_putstr(const char* str)
{
    8154:	defffe04 	addi	sp,sp,-8
    8158:	dc000015 	stw	r16,0(sp)
    815c:	dfc00115 	stw	ra,4(sp)
    8160:	2021883a 	mov	r16,r4
#ifdef ALT_SEMIHOSTING
    return write(STDOUT_FILENO,str,strlen(str));
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, str, strlen(str), 0);
    8164:	00081f00 	call	81f0 <strlen>
    8168:	01000074 	movhi	r4,1
    816c:	000f883a 	mov	r7,zero
    8170:	100d883a 	mov	r6,r2
    8174:	800b883a 	mov	r5,r16
    8178:	21208904 	addi	r4,r4,-32220
#else
    return fputs(str, stdout);
#endif
#endif
}
    817c:	dfc00117 	ldw	ra,4(sp)
    8180:	dc000017 	ldw	r16,0(sp)
    8184:	dec00204 	addi	sp,sp,8
    return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, str, strlen(str), 0);
    8188:	00081b01 	jmpi	81b0 <altera_avalon_jtag_uart_write>

0000818c <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
    818c:	deffff04 	addi	sp,sp,-4
    8190:	dfc00015 	stw	ra,0(sp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2, nios2_gen2);
    8194:	00081e80 	call	81e8 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
    8198:	00800044 	movi	r2,1
    819c:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
    81a0:	dfc00017 	ldw	ra,0(sp)
    81a4:	dec00104 	addi	sp,sp,4
    81a8:	f800283a 	ret

000081ac <alt_sys_init>:
 */

void alt_sys_init( void )
{
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
}
    81ac:	f800283a 	ret

000081b0 <altera_avalon_jtag_uart_write>:
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
  unsigned int base = sp->base;
    81b0:	21000017 	ldw	r4,0(r4)
{
    81b4:	3005883a 	mov	r2,r6

  const char * end = ptr + count;
    81b8:	298d883a 	add	r6,r5,r6

  while (ptr < end)
    81bc:	29800136 	bltu	r5,r6,81c4 <altera_avalon_jtag_uart_write+0x14>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);

  return count;
}
    81c0:	f800283a 	ret
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
    81c4:	20c00137 	ldwio	r3,4(r4)
    81c8:	18ffffec 	andhi	r3,r3,65535
    81cc:	183ffb26 	beq	r3,zero,81bc <altera_avalon_jtag_uart_write+0xc>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
    81d0:	29400044 	addi	r5,r5,1
    81d4:	28ffffc7 	ldb	r3,-1(r5)
    81d8:	20c00035 	stwio	r3,0(r4)
    81dc:	003ff706 	br	81bc <altera_avalon_jtag_uart_write+0xc>

000081e0 <alt_dcache_flush_all>:
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
    81e0:	f800283a 	ret

000081e4 <alt_icache_flush_all>:
void alt_icache_flush_all (void)
{
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
    81e4:	f800283a 	ret

000081e8 <altera_nios2_gen2_irq_init>:
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
    NIOS2_WRITE_IENABLE(0);
    81e8:	000170fa 	wrctl	ienable,zero
}
    81ec:	f800283a 	ret

000081f0 <strlen>:
    81f0:	2005883a 	mov	r2,r4
    81f4:	10c00007 	ldb	r3,0(r2)
    81f8:	1800021e 	bne	r3,zero,8204 <strlen+0x14>
    81fc:	1105c83a 	sub	r2,r2,r4
    8200:	f800283a 	ret
    8204:	10800044 	addi	r2,r2,1
    8208:	003ffa06 	br	81f4 <strlen+0x4>
